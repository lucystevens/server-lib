plugins {
    id 'java'
    id 'maven-publish'
}

group 'uk.co.lukestevens'
sourceCompatibility = '11'

def githubPackages = {
    name = "GitHubPackages"
    url = uri("https://maven.pkg.github.com/lukecmstevens/packages")
    credentials {
        username = System.getenv("GH_USER")
        password = System.getenv("GH_TOKEN")
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven githubPackages
}

dependencies {
    implementation 'uk.co.lukestevens:base-lib:2.1.0'
    implementation 'org.slf4j:slf4j-api:1.7.32'

    //implementation 'ch.qos.logback:logback-classic:1.2.7'
    implementation 'com.sparkjava:spark-core:2.9.1'
    implementation 'com.google.code.gson:gson:2.8.5'

    testImplementation 'com.h2database:h2:1.4.199'
    testImplementation 'com.squareup.okhttp3:okhttp:4.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'
    testImplementation 'org.mockito:mockito-core:3.6.0'
}

publishing {
    repositories {
        maven githubPackages
    }
    publications {
        //noinspection GroovyAssignabilityCheck
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

/**
 *  Testing
 */

test {
    useJUnitPlatform()
}

/**
 *  Scripts
 */

task exportProperties {
    doLast {
        File githubEnv = new File(System.getenv("GITHUB_ENV"))
        githubEnv.withWriterAppend { out ->
            out.println "PROJECT_VERSION=$rootProject.version"
            out.println "PROJECT_NAME=$rootProject.name"
        }
    }
}

static def setVersion(String newVersion) {
    File properties = new File("gradle.properties")
    properties.withWriter {
        it.println "version=$newVersion"
    }
}

static String removeSuffix(String version) {
    int index = version.indexOf("-")
    if(index > -1) {
        version = version.substring(0, index)
    }
    return version
}

task finaliseVersion {
    doLast {
        String currentVersion = rootProject.version.toString()
        String newVersion = removeSuffix(currentVersion)
        if(currentVersion != newVersion) {
            setVersion(newVersion)
        }
    }
}

task bumpVersion {
    doLast {
        String currentVersion = rootProject.version.toString()
        String finalVersion = removeSuffix(currentVersion)
        String[] versionParts = finalVersion.split("\\.")
        if(versionParts.length < 2){
            throw new IllegalArgumentException("Version must have at least major and minor identifier")
        }

        // Add major and minor versions
        StringBuilder newVersion = new StringBuilder(versionParts[0])
                .append(".")
                .append(Integer.parseInt(versionParts[1]) + 1)
        for(int i = 2; i < versionParts.length; i++){
            newVersion.append(".0") // zero all other parts
        }
        newVersion.append("-SNAPSHOT")

        setVersion(newVersion.toString())
    }
}
